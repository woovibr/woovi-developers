{
  "openapi": "3.0.3",
  "info": {
    "title": "Woovi - Indireto",
    "description": "Documentação infraestrutura pix indireto.",
    "version": "1.0.0"
  },
  "servers": [],
  "paths": {
    "/api/v1/decode/emv": {
      "post": {
        "tags": [
          "decode"
        ],
        "summary": "Parse EMV (PIX) QR code and optionally resolve COB/REC locations",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "emv"
                ],
                "properties": {
                  "emv": {
                    "type": "string",
                    "description": "Raw EMV / PIX QR payload (text)",
                    "example": "00020126780014br.gov.bcb.pix0136f4c6089a-bfde-4c00-a2d9-9eaa584b02190216CobrancaEstatica5204000053039865406546.285802BR5903Pix6008BRASILIA6229052584767c56c2ab4e65b6670de2a80950014br.gov.bcb.pix2573qr-h.sandbox.pix.bcb.gov.br/rest/api/rec/4b62d4a088fe4f51bcb4c64cf078869163044486"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Parsed EMV payload with resolved COB and/or REC location (when available)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "emv": {
                      "type": "object",
                      "properties": {
                        "payloadFormatIndicator": {
                          "type": "string"
                        },
                        "pointOfInitiationMethod": {
                          "type": "string",
                          "description": "Present when EMV indicates a dynamic QR (e.g. \"12\")"
                        },
                        "merchantAccountInformationPix": {
                          "type": "object",
                          "description": "Parsed \"26\"/\"00\"... Pix merchant account info",
                          "properties": {
                            "gui": {
                              "type": "string"
                            },
                            "pixKey": {
                              "type": "string",
                              "description": "UUID or key when Pix key present"
                            },
                            "url": {
                              "type": "string",
                              "description": "URL when location points to a COB/REC resource"
                            },
                            "additionalInformation": {
                              "type": "string"
                            }
                          }
                        },
                        "merchantCategoryCode": {
                          "type": "string"
                        },
                        "transactionCurrency": {
                          "type": "string"
                        },
                        "transactionAmount": {
                          "type": "string"
                        },
                        "countryCode": {
                          "type": "string"
                        },
                        "merchantName": {
                          "type": "string"
                        },
                        "merchantCity": {
                          "type": "string"
                        },
                        "additionalDataFieldTemplate": {
                          "type": "object",
                          "properties": {
                            "referenceLabel": {
                              "type": "string"
                            }
                          }
                        },
                        "unreservedTemplates": {
                          "type": "object",
                          "properties": {
                            "gui": {
                              "type": "string"
                            },
                            "url": {
                              "type": "string"
                            }
                          }
                        },
                        "crc": {
                          "type": "string"
                        }
                      }
                    },
                    "cobLocation": {
                      "nullable": true,
                      "type": "object",
                      "description": "Resolved COB (charge) location details when the EMV points to a COB endpoint",
                      "properties": {
                        "isValid": {
                          "type": "boolean"
                        },
                        "locationErrors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "payload": {
                          "type": "object",
                          "properties": {
                            "calendar": {
                              "type": "object",
                              "properties": {
                                "presentation": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "expiration": {
                                  "type": "integer"
                                },
                                "creation": {
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            },
                            "key": {
                              "type": "string"
                            },
                            "debtor": {
                              "type": "object",
                              "properties": {
                                "cpf": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                }
                              }
                            },
                            "additionalInfo": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "revision": {
                              "type": "integer"
                            },
                            "status": {
                              "type": "string"
                            },
                            "txid": {
                              "type": "string"
                            },
                            "value": {
                              "type": "object",
                              "properties": {
                                "original": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "url": {
                          "type": "string"
                        }
                      }
                    },
                    "recLocation": {
                      "nullable": true,
                      "type": "object",
                      "description": "Resolved REC (request for payment) location details when EMV points to a REC endpoint",
                      "properties": {
                        "isValid": {
                          "type": "boolean"
                        },
                        "locationErrors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "payload": {
                          "type": "object",
                          "properties": {
                            "updates": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "date": {
                                    "type": "string",
                                    "format": "date-time"
                                  },
                                  "status": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "calendar": {
                              "type": "object",
                              "properties": {
                                "startDate": {
                                  "type": "string",
                                  "format": "date"
                                },
                                "periodicity": {
                                  "type": "string"
                                }
                              }
                            },
                            "idRec": {
                              "type": "string"
                            },
                            "retryPolicy": {
                              "type": "string"
                            },
                            "receiver": {
                              "type": "object",
                              "properties": {
                                "cnpj": {
                                  "type": "string"
                                },
                                "participantIspb": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                }
                              }
                            },
                            "value": {
                              "type": "object",
                              "properties": {
                                "valueRec": {
                                  "type": "string"
                                }
                              }
                            },
                            "link": {
                              "type": "object",
                              "properties": {
                                "contract": {
                                  "type": "string"
                                },
                                "debtor": {
                                  "type": "object",
                                  "properties": {
                                    "cpf": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "url": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "parsedWithRecLocation": {
                    "summary": "EMV parsed and REC location resolved",
                    "value": {
                      "emv": {
                        "payloadFormatIndicator": "01",
                        "merchantAccountInformationPix": {
                          "gui": "br.gov.bcb.pix",
                          "pixKey": "f4c6089a-bfde-4c00-a2d9-9eaa584b0219",
                          "additionalInformation": "CobrancaEstatica"
                        },
                        "merchantCategoryCode": "0000",
                        "transactionCurrency": "986",
                        "transactionAmount": "546.28",
                        "countryCode": "BR",
                        "merchantName": "Pix",
                        "merchantCity": "BRASILIA",
                        "additionalDataFieldTemplate": {
                          "referenceLabel": "84767c56c2ab4e65b6670de2a"
                        },
                        "unreservedTemplates": {
                          "gui": "br.gov.bcb.pix",
                          "url": "qr-h.sandbox.pix.bcb.gov.br/rest/api/rec/4b62d4a088fe4f51bcb4c64cf0788691"
                        },
                        "crc": "4486"
                      },
                      "cobLocation": null,
                      "recLocation": {
                        "isValid": true,
                        "locationErrors": [],
                        "payload": {
                          "updates": [
                            {
                              "date": "2025-10-24T18:42:58Z",
                              "status": "CRIADA"
                            }
                          ],
                          "calendar": {
                            "startDate": "2025-10-24",
                            "periodicity": "SEMANAL"
                          },
                          "idRec": "RN5481141720251024BnwNHejs9h9",
                          "retryPolicy": "NAO_PERMITE",
                          "receiver": {
                            "cnpj": "44720743000101",
                            "participantIspb": "54811417",
                            "name": "Woovi Demo"
                          },
                          "value": {
                            "valueRec": "0.01"
                          },
                          "link": {
                            "contract": "Woovi Demo - Pix Automático",
                            "debtor": {
                              "cpf": "15775023706",
                              "name": "Pedro Cliente"
                            }
                          }
                        },
                        "url": "qr-h.sandbox.pix.bcb.gov.br/rest/api/rec/4b62d4a088fe4f51bcb4c64cf0788691"
                      }
                    }
                  },
                  "parsedWithCobLocation": {
                    "summary": "EMV parsed and COB location resolved",
                    "value": {
                      "emv": {
                        "payloadFormatIndicator": "01",
                        "pointOfInitiationMethod": "12",
                        "merchantAccountInformationPix": {
                          "gui": "br.gov.bcb.pix",
                          "url": "qr-h.woovi.digital/qr/v2/cob/fb274322-221c-43d4-b58b-fab36d87c75c"
                        },
                        "merchantCategoryCode": "0000",
                        "transactionCurrency": "986",
                        "transactionAmount": "10.00",
                        "countryCode": "BR",
                        "merchantName": "sibeliusip",
                        "merchantCity": "Sao_Paulo",
                        "additionalDataFieldTemplate": {
                          "referenceLabel": "fb274322-221c-43d4-b58b-f"
                        },
                        "crc": "0C98"
                      },
                      "cobLocation": {
                        "isValid": true,
                        "locationErrors": [],
                        "payload": {
                          "calendar": {
                            "presentation": "2025-02-25T13:27:54.168Z",
                            "expiration": 86400,
                            "creation": "2025-02-12T16:59:22.939Z"
                          },
                          "key": "4004901d-bd85-4769-8e52-cb4c42c506dc",
                          "debtor": {
                            "cpf": "62550186362",
                            "name": "Fulano de Tal"
                          },
                          "additionalInfo": [
                            {
                              "name": "Entrega",
                              "value": "Residencial"
                            }
                          ],
                          "revision": 0,
                          "status": "ATIVA",
                          "txid": "d71a2ffd7a7b468eba993cef83428583",
                          "value": {
                            "original": "120.58"
                          }
                        },
                        "url": "qr-h.woovi.digital/qr/v2/cob/fb274322-221c-43d4-b58b-fab36d87c75c"
                      },
                      "recLocation": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request — invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "error": "Invalid EMV payload"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "error": "Internal server error occurred"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Native",
            "source": "const http = require('http');\n\nconst options = {\n  method: 'POST',\n  hostname: 'undefinedundefined',\n  port: null,\n  path: '/api/v1/decode/emv',\n  headers: {\n    'content-type': 'application/json'\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on('data', function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on('end', function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  emv: '00020126780014br.gov.bcb.pix0136f4c6089a-bfde-4c00-a2d9-9eaa584b02190216CobrancaEstatica5204000053039865406546.285802BR5903Pix6008BRASILIA6229052584767c56c2ab4e65b6670de2a80950014br.gov.bcb.pix2573qr-h.sandbox.pix.bcb.gov.br/rest/api/rec/4b62d4a088fe4f51bcb4c64cf078869163044486'\n}));\nreq.end();"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url http://undefinedundefined/api/v1/decode/emv \\\n  --header 'content-type: application/json' \\\n  --data '{\"emv\":\"00020126780014br.gov.bcb.pix0136f4c6089a-bfde-4c00-a2d9-9eaa584b02190216CobrancaEstatica5204000053039865406546.285802BR5903Pix6008BRASILIA6229052584767c56c2ab4e65b6670de2a80950014br.gov.bcb.pix2573qr-h.sandbox.pix.bcb.gov.br/rest/api/rec/4b62d4a088fe4f51bcb4c64cf078869163044486\"}'"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"http://undefinedundefined/api/v1/decode/emv\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => json_encode([\n    'emv' => '00020126780014br.gov.bcb.pix0136f4c6089a-bfde-4c00-a2d9-9eaa584b02190216CobrancaEstatica5204000053039865406546.285802BR5903Pix6008BRASILIA6229052584767c56c2ab4e65b6670de2a80950014br.gov.bcb.pix2573qr-h.sandbox.pix.bcb.gov.br/rest/api/rec/4b62d4a088fe4f51bcb4c64cf078869163044486'\n  ]),\n  CURLOPT_HTTPHEADER => [\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\npayload = \"{\\\"emv\\\":\\\"00020126780014br.gov.bcb.pix0136f4c6089a-bfde-4c00-a2d9-9eaa584b02190216CobrancaEstatica5204000053039865406546.285802BR5903Pix6008BRASILIA6229052584767c56c2ab4e65b6670de2a80950014br.gov.bcb.pix2573qr-h.sandbox.pix.bcb.gov.br/rest/api/rec/4b62d4a088fe4f51bcb4c64cf078869163044486\\\"}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/api/v1/decode/emv\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/v1/decode/emv\"\n\n\tpayload := strings.NewReader(\"{\\\"emv\\\":\\\"00020126780014br.gov.bcb.pix0136f4c6089a-bfde-4c00-a2d9-9eaa584b02190216CobrancaEstatica5204000053039865406546.285802BR5903Pix6008BRASILIA6229052584767c56c2ab4e65b6670de2a80950014br.gov.bcb.pix2573qr-h.sandbox.pix.bcb.gov.br/rest/api/rec/4b62d4a088fe4f51bcb4c64cf078869163044486\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := io.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java + Okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"emv\\\":\\\"00020126780014br.gov.bcb.pix0136f4c6089a-bfde-4c00-a2d9-9eaa584b02190216CobrancaEstatica5204000053039865406546.285802BR5903Pix6008BRASILIA6229052584767c56c2ab4e65b6670de2a80950014br.gov.bcb.pix2573qr-h.sandbox.pix.bcb.gov.br/rest/api/rec/4b62d4a088fe4f51bcb4c64cf078869163044486\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"http://undefinedundefined/api/v1/decode/emv\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/v1/decode/emv\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"emv\\\":\\\"00020126780014br.gov.bcb.pix0136f4c6089a-bfde-4c00-a2d9-9eaa584b02190216CobrancaEstatica5204000053039865406546.285802BR5903Pix6008BRASILIA6229052584767c56c2ab4e65b6670de2a80950014br.gov.bcb.pix2573qr-h.sandbox.pix.bcb.gov.br/rest/api/rec/4b62d4a088fe4f51bcb4c64cf078869163044486\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },

    "/pix-charge/v1/emv/": {
      "post": {
        "tags": [
          "pixCharge"
        ],
        "summary": "Generate EMV QR Code for PIX",
        "description": "Generates an EMV QR Code string in TLV (Tag-Length-Value) format for PIX payments.\nThis endpoint creates a standardized QR code that can be used for PIX instant payments\nin Brazil. The generated EMV string contains all necessary information for PIX\ntransactions including merchant details and location URL.\n\n## Key Features:\n- **Validation**: Strict validation of merchant name and city (no diacritics, length limits)\n- **Default Values**: Automatically applies standard PIX EMV values when not provided\n- **TLV Format**: Returns EMV string in proper TLV format for QR code generation\n- **Brazilian Standards**: Compliant with Brazilian PIX instant payment standards\n\n## Validation Rules:\n- `merchantName`: Required, 1-25 characters, no diacritics\n- `merchantCity`: Required, 1-15 characters, no diacritics  \n- `merchantAccountInformationPix.url`: Required, valid URI format\n\n## Default Values Applied:\n- `payloadFormatIndicator`: \"01\"\n- `pointOfInitiationMethod`: \"12\" (dynamic QR)\n- `merchantCategoryCode`: \"0000\"\n- `transactionCurrency`: \"986\" (Brazilian Real)\n- `countryCode`: \"BR\"\n- `additionalDataFieldTemplate.referenceLabel`: \"***\"\n\nThe endpoint will return validation errors for any field that doesn't meet the requirements.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EMVRequest"
              },
              "examples": {
                "basic_example": {
                  "summary": "Basic EMV generation",
                  "value": {
                    "merchantName": "Test Merchant",
                    "merchantCity": "Sao Paulo",
                    "merchantAccountInformationPix": {
                      "url": "https://example.com/pix"
                    }
                  }
                },
                "with_additional_fields": {
                  "summary": "EMV generation with additional fields",
                  "value": {
                    "merchantName": "Test Merchant",
                    "merchantCity": "Sao Paulo",
                    "merchantAccountInformationPix": {
                      "gui": "br.gov.bcb.pix",
                      "url": "https://example.com/pix",
                      "additionalInformation": "Payment for services"
                    }
                  }
                },
                "minimal_example": {
                  "summary": "Minimal required fields only",
                  "value": {
                    "merchantName": "Merchant",
                    "merchantCity": "Sao Paulo",
                    "merchantAccountInformationPix": {
                      "url": "https://merchant.com/pix/payment"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "EMV QR Code generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EMVResponse"
                },
                "examples": {
                  "success_response": {
                    "summary": "Successful EMV generation",
                    "value": {
                      "emv": "00020101021226450014br.gov.bcb.pix2523https://example.com/pix5204000053039865802BR5913Test Merchant6009Sao Paulo62070503***6304E69E"
                    }
                  },
                  "success_with_additional_info": {
                    "summary": "EMV generation with additional information",
                    "value": {
                      "emv": "00020101021226450014br.gov.bcb.pix2523https://example.com/pix5204000053039865802BR5913Test Merchant6009Sao Paulo62070503***6304E69E"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "missing_merchant_name": {
                    "summary": "Missing merchant name",
                    "value": {
                      "error": {
                        "issues": [
                          {
                            "code": "invalid_type",
                            "expected": "string",
                            "received": "undefined",
                            "path": [
                              "merchantName"
                            ],
                            "message": "merchantName is required"
                          }
                        ],
                        "name": "ZodError",
                        "message": "Validation error"
                      }
                    }
                  },
                  "missing_merchant_city": {
                    "summary": "Missing merchant city",
                    "value": {
                      "error": {
                        "issues": [
                          {
                            "code": "invalid_type",
                            "expected": "string",
                            "received": "undefined",
                            "path": [
                              "merchantCity"
                            ],
                            "message": "merchantCity is required"
                          }
                        ],
                        "name": "ZodError",
                        "message": "Validation error"
                      }
                    }
                  },
                  "missing_pix_info": {
                    "summary": "Missing merchant account information",
                    "value": {
                      "error": {
                        "issues": [
                          {
                            "code": "invalid_type",
                            "expected": "object",
                            "received": "undefined",
                            "path": [
                              "merchantAccountInformationPix"
                            ],
                            "message": "Required"
                          }
                        ],
                        "name": "ZodError",
                        "message": "Validation error"
                      }
                    }
                  },
                  "diacritics_in_merchant_name": {
                    "summary": "Diacritics in merchant name",
                    "value": {
                      "error": {
                        "issues": [
                          {
                            "code": "custom",
                            "path": [
                              "merchantName"
                            ],
                            "message": "String must not contain diacritics",
                            "validation": "noDiacritics"
                          }
                        ],
                        "name": "ZodError",
                        "message": "Validation error"
                      }
                    }
                  },
                  "diacritics_in_merchant_city": {
                    "summary": "Diacritics in merchant city",
                    "value": {
                      "error": {
                        "issues": [
                          {
                            "code": "custom",
                            "path": [
                              "merchantCity"
                            ],
                            "message": "String must not contain diacritics",
                            "validation": "noDiacritics"
                          }
                        ],
                        "name": "ZodError",
                        "message": "Validation error"
                      }
                    }
                  },
                  "merchant_name_too_long": {
                    "summary": "Merchant name too long",
                    "value": {
                      "error": {
                        "issues": [
                          {
                            "code": "too_big",
                            "maximum": 25,
                            "type": "string",
                            "inclusive": true,
                            "path": [
                              "merchantName"
                            ],
                            "message": "String must contain at most 25 character(s)"
                          }
                        ],
                        "name": "ZodError",
                        "message": "Validation error"
                      }
                    }
                  },
                  "merchant_city_too_long": {
                    "summary": "Merchant city too long",
                    "value": {
                      "error": {
                        "issues": [
                          {
                            "code": "too_big",
                            "maximum": 15,
                            "type": "string",
                            "inclusive": true,
                            "path": [
                              "merchantCity"
                            ],
                            "message": "String must contain at most 15 character(s)"
                          }
                        ],
                        "name": "ZodError",
                        "message": "Validation error"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid AppID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Native",
            "source": "const http = require('https');\n\nconst options = {\n  method: 'POST',\n  hostname: '',\n  port: null,\n  path: '%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/emv/',\n  headers: {\n    'content-type': 'application/json'\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on('data', function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on('end', function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  merchantName: 'Test Merchant',\n  merchantCity: 'Sao Paulo',\n  merchantAccountInformationPix: {\n    gui: 'br.gov.bcb.pix',\n    url: 'https://example.com/pix',\n    additionalInformation: 'Payment for services',\n    fss: 'string',\n    pixKey: 'string'\n  },\n  payloadFormatIndicator: '01',\n  pointOfInitiationMethod: '12',\n  merchantCategoryCode: '0000',\n  transactionCurrency: '986',\n  countryCode: 'BR',\n  additionalDataFieldTemplate: {referenceLabel: '***'},\n  unreservedTemplates: {\n    gui: 'string',\n    url: 'http://example.com',\n    additionalInformation: 'string',\n    fss: 'string',\n    pixKey: 'string'\n  }\n}));\nreq.end();"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/emv/ \\\n  --header 'content-type: application/json' \\\n  --data '{\"merchantName\":\"Test Merchant\",\"merchantCity\":\"Sao Paulo\",\"merchantAccountInformationPix\":{\"gui\":\"br.gov.bcb.pix\",\"url\":\"https://example.com/pix\",\"additionalInformation\":\"Payment for services\",\"fss\":\"string\",\"pixKey\":\"string\"},\"payloadFormatIndicator\":\"01\",\"pointOfInitiationMethod\":\"12\",\"merchantCategoryCode\":\"0000\",\"transactionCurrency\":\"986\",\"countryCode\":\"BR\",\"additionalDataFieldTemplate\":{\"referenceLabel\":\"***\"},\"unreservedTemplates\":{\"gui\":\"string\",\"url\":\"http://example.com\",\"additionalInformation\":\"string\",\"fss\":\"string\",\"pixKey\":\"string\"}}'"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/emv/\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => json_encode([\n    'merchantName' => 'Test Merchant',\n    'merchantCity' => 'Sao Paulo',\n    'merchantAccountInformationPix' => [\n        'gui' => 'br.gov.bcb.pix',\n        'url' => 'https://example.com/pix',\n        'additionalInformation' => 'Payment for services',\n        'fss' => 'string',\n        'pixKey' => 'string'\n    ],\n    'payloadFormatIndicator' => '01',\n    'pointOfInitiationMethod' => '12',\n    'merchantCategoryCode' => '0000',\n    'transactionCurrency' => '986',\n    'countryCode' => 'BR',\n    'additionalDataFieldTemplate' => [\n        'referenceLabel' => '***'\n    ],\n    'unreservedTemplates' => [\n        'gui' => 'string',\n        'url' => 'http://example.com',\n        'additionalInformation' => 'string',\n        'fss' => 'string',\n        'pixKey' => 'string'\n    ]\n  ]),\n  CURLOPT_HTTPHEADER => [\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{\\\"merchantName\\\":\\\"Test Merchant\\\",\\\"merchantCity\\\":\\\"Sao Paulo\\\",\\\"merchantAccountInformationPix\\\":{\\\"gui\\\":\\\"br.gov.bcb.pix\\\",\\\"url\\\":\\\"https://example.com/pix\\\",\\\"additionalInformation\\\":\\\"Payment for services\\\",\\\"fss\\\":\\\"string\\\",\\\"pixKey\\\":\\\"string\\\"},\\\"payloadFormatIndicator\\\":\\\"01\\\",\\\"pointOfInitiationMethod\\\":\\\"12\\\",\\\"merchantCategoryCode\\\":\\\"0000\\\",\\\"transactionCurrency\\\":\\\"986\\\",\\\"countryCode\\\":\\\"BR\\\",\\\"additionalDataFieldTemplate\\\":{\\\"referenceLabel\\\":\\\"***\\\"},\\\"unreservedTemplates\\\":{\\\"gui\\\":\\\"string\\\",\\\"url\\\":\\\"http://example.com\\\",\\\"additionalInformation\\\":\\\"string\\\",\\\"fss\\\":\\\"string\\\",\\\"pixKey\\\":\\\"string\\\"}}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/emv/\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io\"\n)\n\nfunc main() {\n\n\turl := \"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/emv/\"\n\n\tpayload := strings.NewReader(\"{\\\"merchantName\\\":\\\"Test Merchant\\\",\\\"merchantCity\\\":\\\"Sao Paulo\\\",\\\"merchantAccountInformationPix\\\":{\\\"gui\\\":\\\"br.gov.bcb.pix\\\",\\\"url\\\":\\\"https://example.com/pix\\\",\\\"additionalInformation\\\":\\\"Payment for services\\\",\\\"fss\\\":\\\"string\\\",\\\"pixKey\\\":\\\"string\\\"},\\\"payloadFormatIndicator\\\":\\\"01\\\",\\\"pointOfInitiationMethod\\\":\\\"12\\\",\\\"merchantCategoryCode\\\":\\\"0000\\\",\\\"transactionCurrency\\\":\\\"986\\\",\\\"countryCode\\\":\\\"BR\\\",\\\"additionalDataFieldTemplate\\\":{\\\"referenceLabel\\\":\\\"***\\\"},\\\"unreservedTemplates\\\":{\\\"gui\\\":\\\"string\\\",\\\"url\\\":\\\"http://example.com\\\",\\\"additionalInformation\\\":\\\"string\\\",\\\"fss\\\":\\\"string\\\",\\\"pixKey\\\":\\\"string\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := io.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java + Okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"merchantName\\\":\\\"Test Merchant\\\",\\\"merchantCity\\\":\\\"Sao Paulo\\\",\\\"merchantAccountInformationPix\\\":{\\\"gui\\\":\\\"br.gov.bcb.pix\\\",\\\"url\\\":\\\"https://example.com/pix\\\",\\\"additionalInformation\\\":\\\"Payment for services\\\",\\\"fss\\\":\\\"string\\\",\\\"pixKey\\\":\\\"string\\\"},\\\"payloadFormatIndicator\\\":\\\"01\\\",\\\"pointOfInitiationMethod\\\":\\\"12\\\",\\\"merchantCategoryCode\\\":\\\"0000\\\",\\\"transactionCurrency\\\":\\\"986\\\",\\\"countryCode\\\":\\\"BR\\\",\\\"additionalDataFieldTemplate\\\":{\\\"referenceLabel\\\":\\\"***\\\"},\\\"unreservedTemplates\\\":{\\\"gui\\\":\\\"string\\\",\\\"url\\\":\\\"http://example.com\\\",\\\"additionalInformation\\\":\\\"string\\\",\\\"fss\\\":\\\"string\\\",\\\"pixKey\\\":\\\"string\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/emv/\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/emv/\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"merchantName\\\":\\\"Test Merchant\\\",\\\"merchantCity\\\":\\\"Sao Paulo\\\",\\\"merchantAccountInformationPix\\\":{\\\"gui\\\":\\\"br.gov.bcb.pix\\\",\\\"url\\\":\\\"https://example.com/pix\\\",\\\"additionalInformation\\\":\\\"Payment for services\\\",\\\"fss\\\":\\\"string\\\",\\\"pixKey\\\":\\\"string\\\"},\\\"payloadFormatIndicator\\\":\\\"01\\\",\\\"pointOfInitiationMethod\\\":\\\"12\\\",\\\"merchantCategoryCode\\\":\\\"0000\\\",\\\"transactionCurrency\\\":\\\"986\\\",\\\"countryCode\\\":\\\"BR\\\",\\\"additionalDataFieldTemplate\\\":{\\\"referenceLabel\\\":\\\"***\\\"},\\\"unreservedTemplates\\\":{\\\"gui\\\":\\\"string\\\",\\\"url\\\":\\\"http://example.com\\\",\\\"additionalInformation\\\":\\\"string\\\",\\\"fss\\\":\\\"string\\\",\\\"pixKey\\\":\\\"string\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/pix-charge/v1/charge/{txid}": {
      "post": {
        "tags": [
          "pixCharge"
        ],
        "summary": "Create a new Pix charge",
        "description": "Create a new Pix charge with the specified parameters",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique transaction identifier"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PixChargeCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Pix charge created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "charge": {
                      "$ref": "#/components/schemas/PixCharge"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid AppID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - txid already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Native",
            "source": "const http = require('https');\n\nconst options = {\n  method: 'POST',\n  hostname: '',\n  port: null,\n  path: '%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/%7Btxid%7D',\n  headers: {\n    'content-type': 'application/json'\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on('data', function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on('end', function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  chargeType: 'cob',\n  calendar: {\n    dueDate: 'string',\n    expiration: 1,\n    validateAfterExpiration: 0,\n    presentation: 'string',\n    creation: 'string'\n  },\n  additionalInfo: [{name: 'string', value: 'string'}],\n  comment: 'string',\n  amount: {\n    customerCanChangeValue: true,\n    chargeValue: 0,\n    interestRules: {modality: 1, value: 0},\n    discountRules: {modality: 1, discountFixedDate: [{data: 'string', value: 0}], value: 0},\n    rebateRules: {modality: 1, value: 0},\n    fineRules: {modality: 1, value: 0},\n    withdrawal: {\n      withdraw: {\n        value: 0,\n        agentMode: 'string',\n        changeMode: 0,\n        withdrawalServiceProvider: 'string'\n      },\n      change: {\n        value: 0,\n        agentMode: 'string',\n        changeMode: 0,\n        withdrawalServiceProvider: 'string'\n      }\n    }\n  },\n  pixKey: 'string',\n  location: {id: 'string', isLinked: false},\n  ensureSameTaxID: true,\n  debtor: {name: 'string', taxID: 'string', taxIDType: 'BR:CNPJ'},\n  receiver: {\n    name: 'string',\n    taxID: 'string',\n    taxIDType: 'BR:CNPJ',\n    tradeName: 'string',\n    email: 'string',\n    street: 'string',\n    city: 'string',\n    state: 'st',\n    zipcode: 'string'\n  }\n}));\nreq.end();"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/%7Btxid%7D \\\n  --header 'content-type: application/json' \\\n  --data '{\"chargeType\":\"cob\",\"calendar\":{\"dueDate\":\"string\",\"expiration\":1,\"validateAfterExpiration\":0,\"presentation\":\"string\",\"creation\":\"string\"},\"additionalInfo\":[{\"name\":\"string\",\"value\":\"string\"}],\"comment\":\"string\",\"amount\":{\"customerCanChangeValue\":true,\"chargeValue\":0,\"interestRules\":{\"modality\":1,\"value\":0},\"discountRules\":{\"modality\":1,\"discountFixedDate\":[{\"data\":\"string\",\"value\":0}],\"value\":0},\"rebateRules\":{\"modality\":1,\"value\":0},\"fineRules\":{\"modality\":1,\"value\":0},\"withdrawal\":{\"withdraw\":{\"value\":0,\"agentMode\":\"string\",\"changeMode\":0,\"withdrawalServiceProvider\":\"string\"},\"change\":{\"value\":0,\"agentMode\":\"string\",\"changeMode\":0,\"withdrawalServiceProvider\":\"string\"}}},\"pixKey\":\"string\",\"location\":{\"id\":\"string\",\"isLinked\":false},\"ensureSameTaxID\":true,\"debtor\":{\"name\":\"string\",\"taxID\":\"string\",\"taxIDType\":\"BR:CNPJ\"},\"receiver\":{\"name\":\"string\",\"taxID\":\"string\",\"taxIDType\":\"BR:CNPJ\",\"tradeName\":\"string\",\"email\":\"string\",\"street\":\"string\",\"city\":\"string\",\"state\":\"st\",\"zipcode\":\"string\"}}'"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/%7Btxid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => json_encode([\n    'chargeType' => 'cob',\n    'calendar' => [\n        'dueDate' => 'string',\n        'expiration' => 1,\n        'validateAfterExpiration' => 0,\n        'presentation' => 'string',\n        'creation' => 'string'\n    ],\n    'additionalInfo' => [\n        [\n                'name' => 'string',\n                'value' => 'string'\n        ]\n    ],\n    'comment' => 'string',\n    'amount' => [\n        'customerCanChangeValue' => null,\n        'chargeValue' => 0,\n        'interestRules' => [\n                'modality' => 1,\n                'value' => 0\n        ],\n        'discountRules' => [\n                'modality' => 1,\n                'discountFixedDate' => [\n                                [\n                                                                'data' => 'string',\n                                                                'value' => 0\n                                ]\n                ],\n                'value' => 0\n        ],\n        'rebateRules' => [\n                'modality' => 1,\n                'value' => 0\n        ],\n        'fineRules' => [\n                'modality' => 1,\n                'value' => 0\n        ],\n        'withdrawal' => [\n                'withdraw' => [\n                                'value' => 0,\n                                'agentMode' => 'string',\n                                'changeMode' => 0,\n                                'withdrawalServiceProvider' => 'string'\n                ],\n                'change' => [\n                                'value' => 0,\n                                'agentMode' => 'string',\n                                'changeMode' => 0,\n                                'withdrawalServiceProvider' => 'string'\n                ]\n        ]\n    ],\n    'pixKey' => 'string',\n    'location' => [\n        'id' => 'string',\n        'isLinked' => null\n    ],\n    'ensureSameTaxID' => null,\n    'debtor' => [\n        'name' => 'string',\n        'taxID' => 'string',\n        'taxIDType' => 'BR:CNPJ'\n    ],\n    'receiver' => [\n        'name' => 'string',\n        'taxID' => 'string',\n        'taxIDType' => 'BR:CNPJ',\n        'tradeName' => 'string',\n        'email' => 'string',\n        'street' => 'string',\n        'city' => 'string',\n        'state' => 'st',\n        'zipcode' => 'string'\n    ]\n  ]),\n  CURLOPT_HTTPHEADER => [\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{\\\"chargeType\\\":\\\"cob\\\",\\\"calendar\\\":{\\\"dueDate\\\":\\\"string\\\",\\\"expiration\\\":1,\\\"validateAfterExpiration\\\":0,\\\"presentation\\\":\\\"string\\\",\\\"creation\\\":\\\"string\\\"},\\\"additionalInfo\\\":[{\\\"name\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"comment\\\":\\\"string\\\",\\\"amount\\\":{\\\"customerCanChangeValue\\\":true,\\\"chargeValue\\\":0,\\\"interestRules\\\":{\\\"modality\\\":1,\\\"value\\\":0},\\\"discountRules\\\":{\\\"modality\\\":1,\\\"discountFixedDate\\\":[{\\\"data\\\":\\\"string\\\",\\\"value\\\":0}],\\\"value\\\":0},\\\"rebateRules\\\":{\\\"modality\\\":1,\\\"value\\\":0},\\\"fineRules\\\":{\\\"modality\\\":1,\\\"value\\\":0},\\\"withdrawal\\\":{\\\"withdraw\\\":{\\\"value\\\":0,\\\"agentMode\\\":\\\"string\\\",\\\"changeMode\\\":0,\\\"withdrawalServiceProvider\\\":\\\"string\\\"},\\\"change\\\":{\\\"value\\\":0,\\\"agentMode\\\":\\\"string\\\",\\\"changeMode\\\":0,\\\"withdrawalServiceProvider\\\":\\\"string\\\"}}},\\\"pixKey\\\":\\\"string\\\",\\\"location\\\":{\\\"id\\\":\\\"string\\\",\\\"isLinked\\\":false},\\\"ensureSameTaxID\\\":true,\\\"debtor\\\":{\\\"name\\\":\\\"string\\\",\\\"taxID\\\":\\\"string\\\",\\\"taxIDType\\\":\\\"BR:CNPJ\\\"},\\\"receiver\\\":{\\\"name\\\":\\\"string\\\",\\\"taxID\\\":\\\"string\\\",\\\"taxIDType\\\":\\\"BR:CNPJ\\\",\\\"tradeName\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"street\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"state\\\":\\\"st\\\",\\\"zipcode\\\":\\\"string\\\"}}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/%7Btxid%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io\"\n)\n\nfunc main() {\n\n\turl := \"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/%7Btxid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"chargeType\\\":\\\"cob\\\",\\\"calendar\\\":{\\\"dueDate\\\":\\\"string\\\",\\\"expiration\\\":1,\\\"validateAfterExpiration\\\":0,\\\"presentation\\\":\\\"string\\\",\\\"creation\\\":\\\"string\\\"},\\\"additionalInfo\\\":[{\\\"name\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"comment\\\":\\\"string\\\",\\\"amount\\\":{\\\"customerCanChangeValue\\\":true,\\\"chargeValue\\\":0,\\\"interestRules\\\":{\\\"modality\\\":1,\\\"value\\\":0},\\\"discountRules\\\":{\\\"modality\\\":1,\\\"discountFixedDate\\\":[{\\\"data\\\":\\\"string\\\",\\\"value\\\":0}],\\\"value\\\":0},\\\"rebateRules\\\":{\\\"modality\\\":1,\\\"value\\\":0},\\\"fineRules\\\":{\\\"modality\\\":1,\\\"value\\\":0},\\\"withdrawal\\\":{\\\"withdraw\\\":{\\\"value\\\":0,\\\"agentMode\\\":\\\"string\\\",\\\"changeMode\\\":0,\\\"withdrawalServiceProvider\\\":\\\"string\\\"},\\\"change\\\":{\\\"value\\\":0,\\\"agentMode\\\":\\\"string\\\",\\\"changeMode\\\":0,\\\"withdrawalServiceProvider\\\":\\\"string\\\"}}},\\\"pixKey\\\":\\\"string\\\",\\\"location\\\":{\\\"id\\\":\\\"string\\\",\\\"isLinked\\\":false},\\\"ensureSameTaxID\\\":true,\\\"debtor\\\":{\\\"name\\\":\\\"string\\\",\\\"taxID\\\":\\\"string\\\",\\\"taxIDType\\\":\\\"BR:CNPJ\\\"},\\\"receiver\\\":{\\\"name\\\":\\\"string\\\",\\\"taxID\\\":\\\"string\\\",\\\"taxIDType\\\":\\\"BR:CNPJ\\\",\\\"tradeName\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"street\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"state\\\":\\\"st\\\",\\\"zipcode\\\":\\\"string\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := io.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java + Okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"chargeType\\\":\\\"cob\\\",\\\"calendar\\\":{\\\"dueDate\\\":\\\"string\\\",\\\"expiration\\\":1,\\\"validateAfterExpiration\\\":0,\\\"presentation\\\":\\\"string\\\",\\\"creation\\\":\\\"string\\\"},\\\"additionalInfo\\\":[{\\\"name\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"comment\\\":\\\"string\\\",\\\"amount\\\":{\\\"customerCanChangeValue\\\":true,\\\"chargeValue\\\":0,\\\"interestRules\\\":{\\\"modality\\\":1,\\\"value\\\":0},\\\"discountRules\\\":{\\\"modality\\\":1,\\\"discountFixedDate\\\":[{\\\"data\\\":\\\"string\\\",\\\"value\\\":0}],\\\"value\\\":0},\\\"rebateRules\\\":{\\\"modality\\\":1,\\\"value\\\":0},\\\"fineRules\\\":{\\\"modality\\\":1,\\\"value\\\":0},\\\"withdrawal\\\":{\\\"withdraw\\\":{\\\"value\\\":0,\\\"agentMode\\\":\\\"string\\\",\\\"changeMode\\\":0,\\\"withdrawalServiceProvider\\\":\\\"string\\\"},\\\"change\\\":{\\\"value\\\":0,\\\"agentMode\\\":\\\"string\\\",\\\"changeMode\\\":0,\\\"withdrawalServiceProvider\\\":\\\"string\\\"}}},\\\"pixKey\\\":\\\"string\\\",\\\"location\\\":{\\\"id\\\":\\\"string\\\",\\\"isLinked\\\":false},\\\"ensureSameTaxID\\\":true,\\\"debtor\\\":{\\\"name\\\":\\\"string\\\",\\\"taxID\\\":\\\"string\\\",\\\"taxIDType\\\":\\\"BR:CNPJ\\\"},\\\"receiver\\\":{\\\"name\\\":\\\"string\\\",\\\"taxID\\\":\\\"string\\\",\\\"taxIDType\\\":\\\"BR:CNPJ\\\",\\\"tradeName\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"street\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"state\\\":\\\"st\\\",\\\"zipcode\\\":\\\"string\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/%7Btxid%7D\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/%7Btxid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"chargeType\\\":\\\"cob\\\",\\\"calendar\\\":{\\\"dueDate\\\":\\\"string\\\",\\\"expiration\\\":1,\\\"validateAfterExpiration\\\":0,\\\"presentation\\\":\\\"string\\\",\\\"creation\\\":\\\"string\\\"},\\\"additionalInfo\\\":[{\\\"name\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"comment\\\":\\\"string\\\",\\\"amount\\\":{\\\"customerCanChangeValue\\\":true,\\\"chargeValue\\\":0,\\\"interestRules\\\":{\\\"modality\\\":1,\\\"value\\\":0},\\\"discountRules\\\":{\\\"modality\\\":1,\\\"discountFixedDate\\\":[{\\\"data\\\":\\\"string\\\",\\\"value\\\":0}],\\\"value\\\":0},\\\"rebateRules\\\":{\\\"modality\\\":1,\\\"value\\\":0},\\\"fineRules\\\":{\\\"modality\\\":1,\\\"value\\\":0},\\\"withdrawal\\\":{\\\"withdraw\\\":{\\\"value\\\":0,\\\"agentMode\\\":\\\"string\\\",\\\"changeMode\\\":0,\\\"withdrawalServiceProvider\\\":\\\"string\\\"},\\\"change\\\":{\\\"value\\\":0,\\\"agentMode\\\":\\\"string\\\",\\\"changeMode\\\":0,\\\"withdrawalServiceProvider\\\":\\\"string\\\"}}},\\\"pixKey\\\":\\\"string\\\",\\\"location\\\":{\\\"id\\\":\\\"string\\\",\\\"isLinked\\\":false},\\\"ensureSameTaxID\\\":true,\\\"debtor\\\":{\\\"name\\\":\\\"string\\\",\\\"taxID\\\":\\\"string\\\",\\\"taxIDType\\\":\\\"BR:CNPJ\\\"},\\\"receiver\\\":{\\\"name\\\":\\\"string\\\",\\\"taxID\\\":\\\"string\\\",\\\"taxIDType\\\":\\\"BR:CNPJ\\\",\\\"tradeName\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"street\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"state\\\":\\\"st\\\",\\\"zipcode\\\":\\\"string\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "put": {
        "tags": [
          "pixCharge"
        ],
        "summary": "Update an existing Pix charge",
        "description": "Update an existing Pix charge with new parameters",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique transaction identifier"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "chargeType": {
                    "$ref": "#/components/schemas/ChargeType"
                  },
                  "calendar": {
                    "$ref": "#/components/schemas/Calendar"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pix charge updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "charge": {
                      "$ref": "#/components/schemas/PixCharge"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid AppID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Pix charge not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Native",
            "source": "const http = require('https');\n\nconst options = {\n  method: 'PUT',\n  hostname: '',\n  port: null,\n  path: '%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/%7Btxid%7D',\n  headers: {\n    'content-type': 'application/json'\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on('data', function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on('end', function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  chargeType: 'cob',\n  calendar: {\n    dueDate: 'string',\n    expiration: 1,\n    validateAfterExpiration: 0,\n    presentation: 'string',\n    creation: 'string'\n  }\n}));\nreq.end();"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/%7Btxid%7D \\\n  --header 'content-type: application/json' \\\n  --data '{\"chargeType\":\"cob\",\"calendar\":{\"dueDate\":\"string\",\"expiration\":1,\"validateAfterExpiration\":0,\"presentation\":\"string\",\"creation\":\"string\"}}'"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/%7Btxid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => json_encode([\n    'chargeType' => 'cob',\n    'calendar' => [\n        'dueDate' => 'string',\n        'expiration' => 1,\n        'validateAfterExpiration' => 0,\n        'presentation' => 'string',\n        'creation' => 'string'\n    ]\n  ]),\n  CURLOPT_HTTPHEADER => [\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{\\\"chargeType\\\":\\\"cob\\\",\\\"calendar\\\":{\\\"dueDate\\\":\\\"string\\\",\\\"expiration\\\":1,\\\"validateAfterExpiration\\\":0,\\\"presentation\\\":\\\"string\\\",\\\"creation\\\":\\\"string\\\"}}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"PUT\", \"%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/%7Btxid%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io\"\n)\n\nfunc main() {\n\n\turl := \"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/%7Btxid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"chargeType\\\":\\\"cob\\\",\\\"calendar\\\":{\\\"dueDate\\\":\\\"string\\\",\\\"expiration\\\":1,\\\"validateAfterExpiration\\\":0,\\\"presentation\\\":\\\"string\\\",\\\"creation\\\":\\\"string\\\"}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := io.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java + Okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"chargeType\\\":\\\"cob\\\",\\\"calendar\\\":{\\\"dueDate\\\":\\\"string\\\",\\\"expiration\\\":1,\\\"validateAfterExpiration\\\":0,\\\"presentation\\\":\\\"string\\\",\\\"creation\\\":\\\"string\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/%7Btxid%7D\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/%7Btxid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"chargeType\\\":\\\"cob\\\",\\\"calendar\\\":{\\\"dueDate\\\":\\\"string\\\",\\\"expiration\\\":1,\\\"validateAfterExpiration\\\":0,\\\"presentation\\\":\\\"string\\\",\\\"creation\\\":\\\"string\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "get": {
        "tags": [
          "pixCharge"
        ],
        "summary": "Get a pix charge",
        "description": "Retrieve details of a specific Pix charge",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "pix charge txid",
            "example": "6290ccfd42831958a405debc"
          },
          {
            "name": "DPP",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Optional payment date-time for calculation"
          },
          {
            "name": "codMun",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Optional municipality code for business-day calculation"
          }
        ],
        "responses": {
          "200": {
            "description": "the pix charge",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "charge": {
                      "$ref": "#/components/schemas/PixCharge",
                      "type": "object"
                    }
                  }
                },
                "example": {
                  "account": {
                    "accountId": "6290ccfd42831958a405debc",
                    "isDefault": true,
                    "balance": {
                      "total": 129430,
                      "blocked": 0,
                      "available": 129430
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "An error message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid AppID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Pix charge not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Native",
            "source": "const http = require('https');\n\nconst options = {\n  method: 'GET',\n  hostname: '',\n  port: null,\n  path: '%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/6290ccfd42831958a405debc?DPP=SOME_STRING_VALUE&codMun=SOME_STRING_VALUE',\n  headers: {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on('data', function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on('end', function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/6290ccfd42831958a405debc?DPP=SOME_STRING_VALUE&codMun=SOME_STRING_VALUE'"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/6290ccfd42831958a405debc?DPP=SOME_STRING_VALUE&codMun=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nconn.request(\"GET\", \"%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/6290ccfd42831958a405debc?DPP=SOME_STRING_VALUE&codMun=SOME_STRING_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io\"\n)\n\nfunc main() {\n\n\turl := \"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/6290ccfd42831958a405debc?DPP=SOME_STRING_VALUE&codMun=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := io.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java + Okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/6290ccfd42831958a405debc?DPP=SOME_STRING_VALUE&codMun=SOME_STRING_VALUE\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/6290ccfd42831958a405debc?DPP=SOME_STRING_VALUE&codMun=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "delete": {
        "tags": [
          "pixCharge"
        ],
        "summary": "Delete a Pix charge",
        "description": "Delete a specific Pix charge",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique transaction identifier"
          }
        ],
        "responses": {
          "204": {
            "description": "Pix charge deleted successfully (no content)"
          },
          "401": {
            "description": "Unauthorized - invalid AppID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Pix charge not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Native",
            "source": "const http = require('https');\n\nconst options = {\n  method: 'DELETE',\n  hostname: '',\n  port: null,\n  path: '%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/%7Btxid%7D',\n  headers: {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on('data', function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on('end', function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/%7Btxid%7D"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/%7Btxid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nconn.request(\"DELETE\", \"%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/%7Btxid%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io\"\n)\n\nfunc main() {\n\n\turl := \"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/%7Btxid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := io.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java + Okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/%7Btxid%7D\")\n  .delete(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/%7Btxid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/pix-charge/v1/charge/location/{locId}": {
      "get": {
        "tags": [
          "pixCharge"
        ],
        "summary": "Get Pix charges by location",
        "description": "Retrieve all Pix charges associated with a specific location",
        "parameters": [
          {
            "name": "locId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Location identifier"
          },
          {
            "name": "DPP",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Optional payment date-time for calculation"
          },
          {
            "name": "codMun",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Optional municipality code for business-day calculation"
          }
        ],
        "responses": {
          "200": {
            "description": "Pix charges retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "charge": {
                      "$ref": "#/components/schemas/PixCharge"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid AppID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Location not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Native",
            "source": "const http = require('https');\n\nconst options = {\n  method: 'GET',\n  hostname: '',\n  port: null,\n  path: '%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/location/%7BlocId%7D?DPP=SOME_STRING_VALUE&codMun=SOME_STRING_VALUE',\n  headers: {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on('data', function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on('end', function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/location/%7BlocId%7D?DPP=SOME_STRING_VALUE&codMun=SOME_STRING_VALUE'"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/location/%7BlocId%7D?DPP=SOME_STRING_VALUE&codMun=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nconn.request(\"GET\", \"%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/location/%7BlocId%7D?DPP=SOME_STRING_VALUE&codMun=SOME_STRING_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io\"\n)\n\nfunc main() {\n\n\turl := \"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/location/%7BlocId%7D?DPP=SOME_STRING_VALUE&codMun=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := io.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java + Okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/location/%7BlocId%7D?DPP=SOME_STRING_VALUE&codMun=SOME_STRING_VALUE\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/location/%7BlocId%7D?DPP=SOME_STRING_VALUE&codMun=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/pix-charge/v1/charge/{txid}/allow": {
      "post": {
        "tags": [
          "pixCharge"
        ],
        "summary": "Check if a Pix charge is allowed to be paid",
        "description": "Check if a Pix charge is allowed to be paid",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique transaction identifier"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "DPP": {
                    "type": "string",
                    "description": "Optional payment date-time for calculation"
                  },
                  "codMun": {
                    "type": "string",
                    "description": "Optional municipality code"
                  },
                  "paymentValue": {
                    "type": "integer",
                    "description": "Payment value to validate"
                  },
                  "taxID": {
                    "type": "string",
                    "description": "Optional payer taxID when ensureSameTaxID is enabled"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Payment allowed (no content)"
          },
          "400": {
            "description": "Bad request - invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid AppID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Pix charge not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Native",
            "source": "const http = require('https');\n\nconst options = {\n  method: 'POST',\n  hostname: '',\n  port: null,\n  path: '%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/%7Btxid%7D/allow',\n  headers: {\n    'content-type': 'application/json'\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on('data', function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on('end', function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({DPP: 'string', codMun: 'string', paymentValue: 0, taxID: 'string'}));\nreq.end();"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/%7Btxid%7D/allow \\\n  --header 'content-type: application/json' \\\n  --data '{\"DPP\":\"string\",\"codMun\":\"string\",\"paymentValue\":0,\"taxID\":\"string\"}'"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/%7Btxid%7D/allow\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => json_encode([\n    'DPP' => 'string',\n    'codMun' => 'string',\n    'paymentValue' => 0,\n    'taxID' => 'string'\n  ]),\n  CURLOPT_HTTPHEADER => [\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{\\\"DPP\\\":\\\"string\\\",\\\"codMun\\\":\\\"string\\\",\\\"paymentValue\\\":0,\\\"taxID\\\":\\\"string\\\"}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/%7Btxid%7D/allow\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io\"\n)\n\nfunc main() {\n\n\turl := \"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/%7Btxid%7D/allow\"\n\n\tpayload := strings.NewReader(\"{\\\"DPP\\\":\\\"string\\\",\\\"codMun\\\":\\\"string\\\",\\\"paymentValue\\\":0,\\\"taxID\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := io.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java + Okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"DPP\\\":\\\"string\\\",\\\"codMun\\\":\\\"string\\\",\\\"paymentValue\\\":0,\\\"taxID\\\":\\\"string\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/%7Btxid%7D/allow\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-charge/v1/charge/%7Btxid%7D/allow\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"DPP\\\":\\\"string\\\",\\\"codMun\\\":\\\"string\\\",\\\"paymentValue\\\":0,\\\"taxID\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
        "/qr/v2/{locType}/{pixUrlAccessToken}": {
      "get": {
        "tags": [
          "pixLocation"
        ],
        "summary": "Get Pix location QR code information",
        "description": "Retrieve Pix location information and generate QR code data based on the location type and access token.\nThis endpoint returns JOSE (JSON Object Signing and Encryption) formatted data for QR code generation.\n",
        "parameters": [
          {
            "name": "locType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "cob",
                "cobv",
                "rec"
              ]
            },
            "description": "Type of Pix location"
          },
          {
            "name": "pixUrlAccessToken",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Access token for the Pix location"
          },
          {
            "name": "codMun",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Municipality code for location-specific data"
          },
          {
            "name": "DPP",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Additional location parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Pix location QR code data retrieved successfully",
            "content": {
              "application/jose": {
                "schema": {
                  "type": "string",
                  "description": "JOSE formatted data for QR code generation"
                }
              }
            }
          },
          "404": {
            "description": "Pix location or charge not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message",
                      "example": "A cobrança em questão não foi encontrada para a location requisitada"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Native",
            "source": "const http = require('https');\n\nconst options = {\n  method: 'GET',\n  hostname: '',\n  port: null,\n  path: '%3Cname%3E.indireto.woovi-indireto.dev/qr/v2/%7BlocType%7D/%7BpixUrlAccessToken%7D?codMun=SOME_STRING_VALUE&DPP=SOME_STRING_VALUE',\n  headers: {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on('data', function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on('end', function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https:///%3Cname%3E.indireto.woovi-indireto.dev/qr/v2/%7BlocType%7D/%7BpixUrlAccessToken%7D?codMun=SOME_STRING_VALUE&DPP=SOME_STRING_VALUE'"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https:///%3Cname%3E.indireto.woovi-indireto.dev/qr/v2/%7BlocType%7D/%7BpixUrlAccessToken%7D?codMun=SOME_STRING_VALUE&DPP=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nconn.request(\"GET\", \"%3Cname%3E.indireto.woovi-indireto.dev/qr/v2/%7BlocType%7D/%7BpixUrlAccessToken%7D?codMun=SOME_STRING_VALUE&DPP=SOME_STRING_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io\"\n)\n\nfunc main() {\n\n\turl := \"https:///%3Cname%3E.indireto.woovi-indireto.dev/qr/v2/%7BlocType%7D/%7BpixUrlAccessToken%7D?codMun=SOME_STRING_VALUE&DPP=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := io.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java + Okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https:///%3Cname%3E.indireto.woovi-indireto.dev/qr/v2/%7BlocType%7D/%7BpixUrlAccessToken%7D?codMun=SOME_STRING_VALUE&DPP=SOME_STRING_VALUE\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https:///%3Cname%3E.indireto.woovi-indireto.dev/qr/v2/%7BlocType%7D/%7BpixUrlAccessToken%7D?codMun=SOME_STRING_VALUE&DPP=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/pix-location/v1/location": {
      "post": {
        "tags": [
          "pixLocation"
        ],
        "summary": "Create a new Pix location",
        "description": "Create a new Pix location with the specified type. The service will generate a unique\naccess token and return the complete location information including the QR code URL.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PixLocationCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pix location created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PixLocationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid location type",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid type"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Native",
            "source": "const http = require('https');\n\nconst options = {\n  method: 'POST',\n  hostname: '',\n  port: null,\n  path: '%3Cname%3E.indireto.woovi-indireto.dev/pix-location/v1/location',\n  headers: {\n    'content-type': 'application/json'\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on('data', function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on('end', function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({type: 'cob'}));\nreq.end();"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-location/v1/location \\\n  --header 'content-type: application/json' \\\n  --data '{\"type\":\"cob\"}'"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-location/v1/location\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => json_encode([\n    'type' => 'cob'\n  ]),\n  CURLOPT_HTTPHEADER => [\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{\\\"type\\\":\\\"cob\\\"}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"%3Cname%3E.indireto.woovi-indireto.dev/pix-location/v1/location\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io\"\n)\n\nfunc main() {\n\n\turl := \"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-location/v1/location\"\n\n\tpayload := strings.NewReader(\"{\\\"type\\\":\\\"cob\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := io.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java + Okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"type\\\":\\\"cob\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-location/v1/location\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https:///%3Cname%3E.indireto.woovi-indireto.dev/pix-location/v1/location\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"type\\\":\\\"cob\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "openapi": {
      "0": "3",
      "1": ".",
      "2": "1",
      "3": ".",
      "4": "0"
    },
    "info": {
      "title": "Pix Charge",
      "description": "Pix Charge",
      "version": "1.0.0"
    },
    "servers": {
      "url": "https://<name>.indireto.woovi-indireto.dev",
      "description": "Staging"
    }
  },
  "components": {
    "schemas": {
      "ChargeType": {
        "type": "string",
        "description": "Charge type",
        "enum": [
          "cob",
          "cobv",
          "rec"
        ]
      },
      "InterestModality": {
        "type": "integer",
        "description": "Interest modality",
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8
        ]
      },
      "DiscountModality": {
        "type": "integer",
        "description": "Discount modality",
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "FineModality": {
        "type": "integer",
        "description": "Fine modality",
        "enum": [
          1,
          2
        ]
      },
      "RebateModality": {
        "type": "integer",
        "description": "Rebate modality",
        "enum": [
          1,
          2
        ]
      },
      "AdditionalInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50
          },
          "value": {
            "type": "string",
            "maxLength": 200
          }
        }
      },
      "DiscountFixedData": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "ISO date string"
          },
          "value": {
            "type": "integer"
          }
        }
      },
      "InterestRules": {
        "type": "object",
        "nullable": true,
        "properties": {
          "modality": {
            "$ref": "#/components/schemas/InterestModality"
          },
          "value": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "DiscountRules": {
        "type": "object",
        "nullable": true,
        "properties": {
          "modality": {
            "$ref": "#/components/schemas/DiscountModality"
          },
          "discountFixedDate": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountFixedData"
            }
          },
          "value": {
            "type": "integer"
          }
        }
      },
      "RebateRules": {
        "type": "object",
        "nullable": true,
        "properties": {
          "modality": {
            "$ref": "#/components/schemas/RebateModality"
          },
          "value": {
            "type": "number",
            "minimum": 0
          }
        }
      },
      "FineRules": {
        "type": "object",
        "nullable": true,
        "properties": {
          "modality": {
            "$ref": "#/components/schemas/FineModality"
          },
          "value": {
            "type": "number",
            "minimum": 0
          }
        }
      },
      "Withdraw": {
        "type": "object",
        "nullable": true,
        "properties": {
          "value": {
            "type": "integer",
            "minimum": 0
          },
          "agentMode": {
            "type": "string"
          },
          "changeMode": {
            "type": "integer"
          },
          "withdrawalServiceProvider": {
            "type": "string"
          }
        }
      },
      "Withdrawal": {
        "type": "object",
        "nullable": true,
        "properties": {
          "withdraw": {
            "$ref": "#/components/schemas/Withdraw"
          },
          "change": {
            "$ref": "#/components/schemas/Withdraw"
          }
        }
      },
      "Amount": {
        "type": "object",
        "properties": {
          "customerCanChangeValue": {
            "type": "boolean"
          },
          "chargeValue": {
            "type": "integer"
          },
          "interestRules": {
            "$ref": "#/components/schemas/InterestRules"
          },
          "discountRules": {
            "$ref": "#/components/schemas/DiscountRules"
          },
          "rebateRules": {
            "$ref": "#/components/schemas/RebateRules"
          },
          "fineRules": {
            "$ref": "#/components/schemas/FineRules"
          },
          "withdrawal": {
            "$ref": "#/components/schemas/Withdrawal"
          }
        }
      },
      "Calendar": {
        "type": "object",
        "properties": {
          "dueDate": {
            "type": "string",
            "description": "ISO date string"
          },
          "expiration": {
            "type": "integer",
            "minimum": 1,
            "maximum": 2147483647
          },
          "validateAfterExpiration": {
            "type": "integer"
          },
          "presentation": {
            "type": "string"
          },
          "creation": {
            "type": "string",
            "description": "Only on staging to simplify testing"
          }
        }
      },
      "Debtor": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200
          },
          "taxID": {
            "type": "string"
          },
          "taxIDType": {
            "type": "string",
            "enum": [
              "BR:CNPJ",
              "BR:CPF"
            ]
          }
        }
      },
      "Receiver": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200
          },
          "taxID": {
            "type": "string"
          },
          "taxIDType": {
            "type": "string",
            "enum": [
              "BR:CNPJ",
              "BR:CPF"
            ]
          },
          "tradeName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "street": {
            "type": "string",
            "maxLength": 200
          },
          "city": {
            "type": "string",
            "maxLength": 200
          },
          "state": {
            "type": "string",
            "maxLength": 2
          },
          "zipcode": {
            "type": "string",
            "maxLength": 8
          }
        }
      },
      "PixCharge": {
        "type": "object",
        "properties": {
          "txid": {
            "type": "string",
            "description": "Unique transaction identifier"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "EXPIRED",
              "PAID",
              "CANCELED"
            ]
          },
          "value": {
            "type": "number",
            "description": "Charge amount in cents"
          },
          "key": {
            "type": "string",
            "description": "PIX key for the charge"
          },
          "keyType": {
            "type": "string",
            "enum": [
              "CPF",
              "CNPJ",
              "EMAIL",
              "PHONE",
              "EVP"
            ]
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "txi": {
            "type": "string",
            "description": "txid of pix charge"
          }
        }
      },
      "PixChargeCreate": {
        "type": "object",
        "properties": {
          "chargeType": {
            "$ref": "#/components/schemas/ChargeType"
          },
          "calendar": {
            "$ref": "#/components/schemas/Calendar"
          },
          "additionalInfo": {
            "type": "array",
            "maxItems": 50,
            "items": {
              "$ref": "#/components/schemas/AdditionalInfo"
            }
          },
          "comment": {
            "type": "string",
            "maxLength": 140
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "pixKey": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "location": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "string",
                "minLength": 1
              },
              "isLinked": {
                "type": "boolean",
                "default": false
              }
            }
          },
          "ensureSameTaxID": {
            "type": "boolean"
          },
          "debtor": {
            "$ref": "#/components/schemas/Debtor"
          },
          "receiver": {
            "$ref": "#/components/schemas/Receiver"
          }
        }
      },
      "PixChargeUpdate": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "description": "Charge amount in cents"
          },
          "key": {
            "type": "string",
            "description": "PIX key for the charge"
          },
          "keyType": {
            "type": "string",
            "enum": [
              "CPF",
              "CNPJ",
              "EMAIL",
              "PHONE",
              "EVP"
            ]
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "PixChargeRec": {
        "type": "object",
        "properties": {
          "txid": {
            "type": "string",
            "description": "Transaction identifier"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "EXPIRED",
              "PAID",
              "CANCELED"
            ]
          }
        }
      },
      "PixChargeLocation": {
        "type": "object",
        "properties": {
          "locId": {
            "type": "string",
            "description": "Location identifier"
          },
          "charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PixCharge"
            }
          }
        }
      },
      "AllowPayment": {
        "type": "object",
        "properties": {
          "allowed": {
            "type": "boolean",
            "description": "Whether payment is allowed"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "issues": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Error code"
                    },
                    "expected": {
                      "type": "string",
                      "description": "Expected value type"
                    },
                    "received": {
                      "type": "string",
                      "description": "Received value type"
                    },
                    "path": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Path to the field that caused the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "validation": {
                      "type": "string",
                      "description": "Validation rule that failed"
                    }
                  }
                }
              },
              "name": {
                "type": "string",
                "example": "ZodError"
              },
              "message": {
                "type": "string",
                "example": "Validation error"
              }
            }
          }
        }
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string"
          }
        }
      },
      "EMVRequest": {
        "type": "object",
        "required": [
          "merchantName",
          "merchantCity",
          "merchantAccountInformationPix"
        ],
        "properties": {
          "merchantName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 25,
            "description": "Name of the merchant. Must not contain diacritics (accented characters).\nWill be validated and rejected if longer than 25 characters or contains diacritics.\n",
            "example": "Test Merchant"
          },
          "merchantCity": {
            "type": "string",
            "minLength": 1,
            "maxLength": 15,
            "description": "City where the merchant is located. Must not contain diacritics (accented characters).\nWill be validated and rejected if longer than 15 characters or contains diacritics.\n",
            "example": "Sao Paulo"
          },
          "merchantAccountInformationPix": {
            "type": "object",
            "required": [
              "url"
            ],
            "properties": {
              "gui": {
                "type": "string",
                "description": "Global Unique Identifier for PIX (usually 'br.gov.bcb.pix')",
                "example": "br.gov.bcb.pix"
              },
              "url": {
                "type": "string",
                "format": "uri",
                "description": "URL for the PIX location/endpoint where payment requests are processed",
                "example": "https://example.com/pix"
              },
              "additionalInformation": {
                "type": "string",
                "description": "Additional information for the PIX payment",
                "example": "Payment for services"
              },
              "fss": {
                "type": "string",
                "description": "Financial Service Station identifier"
              },
              "pixKey": {
                "type": "string",
                "description": "PIX key for direct payment"
              }
            }
          },
          "payloadFormatIndicator": {
            "type": "string",
            "description": "EMV QR Code payload format indicator (usually '01')",
            "example": "01"
          },
          "pointOfInitiationMethod": {
            "type": "string",
            "description": "Point of initiation method (usually '12' for dynamic QR)",
            "example": "12"
          },
          "merchantCategoryCode": {
            "type": "string",
            "description": "Merchant category code (MCC) for business classification",
            "example": "0000"
          },
          "transactionCurrency": {
            "type": "string",
            "description": "Transaction currency code (986 for Brazilian Real)",
            "example": "986"
          },
          "countryCode": {
            "type": "string",
            "description": "Country code (BR for Brazil)",
            "example": "BR"
          },
          "additionalDataFieldTemplate": {
            "type": "object",
            "properties": {
              "referenceLabel": {
                "type": "string",
                "description": "Reference label for the transaction",
                "example": "***"
              }
            }
          },
          "unreservedTemplates": {
            "type": "object",
            "properties": {
              "gui": {
                "type": "string",
                "description": "Global Unique Identifier for unreserved templates"
              },
              "url": {
                "type": "string",
                "format": "uri",
                "description": "URL for unreserved template"
              },
              "additionalInformation": {
                "type": "string",
                "description": "Additional information for unreserved template"
              },
              "fss": {
                "type": "string",
                "description": "Financial Service Station identifier for unreserved template"
              },
              "pixKey": {
                "type": "string",
                "description": "PIX key for unreserved template"
              }
            }
          }
        }
      },
      "EMVResponse": {
        "type": "object",
        "properties": {
          "emv": {
            "type": "string",
            "description": "Generated EMV QR Code string in TLV (Tag-Length-Value) format.\nThis string can be directly used to generate a QR code for PIX payments.\nThe format follows the EMV QR Code specification for PIX instant payments in Brazil.\n",
            "example": "00020101021226450014br.gov.bcb.pix2523https://example.com/pix5204000053039865802BR5913Test Merchant6009Sao Paulo62070503***6304E69E"
          }
        }
      },
      "PixLocation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the Pix location"
          },
          "type": {
            "type": "string",
            "enum": [
              "cob",
              "cobv",
              "rec"
            ],
            "description": "Type of Pix location (cob = charge, cobv = charge with value, rec = recommendation)"
          },
          "location": {
            "type": "string",
            "description": "Full URL for the Pix location QR code"
          },
          "pixUrlAccessToken": {
            "type": "string",
            "description": "Unique access token for the Pix location URL"
          },
          "ispb": {
            "type": "string",
            "description": "ISPB (Instituto de Serviços de Pagamento Brasileiro) identifier"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "PixLocationCreate": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cob",
              "cobv",
              "rec"
            ],
            "description": "Type of Pix location to create"
          }
        }
      },
      "PixLocationResponse": {
        "type": "object",
        "properties": {
          "location": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier for the Pix location"
              },
              "type": {
                "type": "string",
                "enum": [
                  "cob",
                  "cobv",
                  "rec"
                ],
                "description": "Type of Pix location"
              },
              "location": {
                "type": "string",
                "description": "Full URL for the Pix location QR code"
              },
              "pixUrlAccessToken": {
                "type": "string",
                "description": "Unique access token for the Pix location URL"
              }
            }
          }
        }
      },
      "PixLocationGetParams": {
        "type": "object",
        "properties": {
          "locType": {
            "type": "string",
            "enum": [
              "cob",
              "cobv",
              "rec"
            ],
            "description": "Type of Pix location"
          },
          "pixUrlAccessToken": {
            "type": "string",
            "description": "Access token for the Pix location"
          }
        }
      },
      "PixLocationQueryParams": {
        "type": "object",
        "properties": {
          "codMun": {
            "type": "string",
            "description": "Municipality code for location-specific data"
          },
          "DPP": {
            "type": "string",
            "description": "Additional location parameter"
          }
        }
      },
      "StatusResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "OK",
            "description": "Service status"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Current timestamp"
          },
          "version": {
            "type": "string",
            "example": "1.0.0",
            "description": "API version"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "pixCharge",
      "description": "Endpoint to manage Pix Charges\n"
    },
    {
      "name": "pixLocation",
      "description": "Endpoints to manage Pix Locations and QR code generation\n"
    }
  ]
}